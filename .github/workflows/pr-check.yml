name: Release

permissions:
  contents: read

on:
  pull_request:
    types:
      - opened
      - reopened
      - edited

jobs:
  # Run 'cargo dist plan' to determine what tasks we need to do
  plan:
    runs-on: ubuntu-latest
    outputs:
      val: ${{ steps.plan.outputs.manifest }}
      tag: ${{ !github.event.pull_request && github.ref_name || '' }}
      tag-flag: ${{ !github.event.pull_request && format('--tag={0}', github.ref_name) || '' }}
      publishing: ${{ !github.event.pull_request }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install cargo-dist
        run: "curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.4.3/cargo-dist-installer.sh | sh"
      - id: plan
        run: |
          cargo dist plan ${{ !github.event.pull_request && format('--tag={0}', github.ref_name) || '' }} --output-format=json > dist-manifest.json
          echo "cargo dist plan ran successfully"
          cat dist-manifest.json
          echo "manifest=$(jq -c "." dist-manifest.json)" >> "$GITHUB_OUTPUT"
      - name: "Upload dist-manifest.json"
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: dist-manifest.json

  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install the Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Rust Cache Action
        uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test
  # `fmt` container job
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          # Specific to dtolnay/rust-toolchain: Comma-separated string of additional components to install
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  # `clippy` container job
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Linting
        run: cargo clippy -- -D warnings

  # `coverage` container job
  # coverage:
  #   name: Code coverage
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - uses: dtolnay/rust-toolchain@stable
  #     - uses: Swatinem/rust-cache@v2
  #     - name: Generate code coverage
  #       run: cargo install cargo-tarpaulin && cargo tarpaulin --verbose --workspace
  #       env:
  #         CARGO_HUSKY_DONT_INSTALL_HOOKS: true

